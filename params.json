{"name":"AMS","tagline":"Asynchronous Messaging Service Framework","body":"AMS - Asynchronous Messaging Service\r\n===\r\n\r\nFeatures\r\n--------\r\n\r\n##### Asynchronous Message Passing\r\nAsynchronous message passing systems deliver a message from sender to receiver, without waiting for the receiver to be ready. The advantage of asynchronous communication is that the sender and receiver can overlap their computation because they do not wait for each other.\r\n\r\nThe reactor used in AMS handles requests delivered concurrently by multiple event resources. Mesage dispatcher handles registering and unregistering of application-defined message handlers, and dispatches messages from the demultiplexer to the associated handlers. Event demultiplexer uses an event loop to block on all resources.\r\n\r\n##### Loosely Coupled\r\nIn a data system based on AMS, any module may be introduced into or removed from the system \r\nat any time without inhibiting the ability of any other module to continue sending and \r\nreceiving messages. The systemâ€™s modules have no inter-dependency to become or stay operational. \r\n\r\n##### Fault-tolerant\r\nAMS-based systems are highly robust, lacking any single point of failure and tolerant\r\nof unplanned module termination. \r\n\r\n##### Fast\r\nCommunication within an AMS-based system is rapid and efficient:\r\n* Messages are exchanged directly between modules rather than through any central\r\nmessage dispatching nexus (i.e. brokers).\r\n* Messages are automatically conveyed using the most suitable underlying transport\r\nservice (TCP/IP) to which the sending and receiving modules both have access. \r\n\r\n##### Scalable\r\nFinally, AMS provides high scalability; hundreds or thousands of cooperating modules have\r\nno significant impact on application performance.\r\n\r\nAPI\r\n---\r\n\r\nCreate or just return a singleton IService instance\r\n\r\n    static IService& IService::instance();\r\n\r\nCreate (or joins to) a messaging domain that is restricted for communication\r\n\r\n    void IService::create_domain(std::string domainName, std::string appName);\r\n    \r\nStart/stop the reactor for both the communication and the dynamic discovery\r\n\r\n    void IService::reactor_start();\r\n    void IService::reactor_stop();\r\n\r\nCreate a subscriber for T-typed messages\r\n\r\n    template<typename T>\r\n    void IService::create_subscriber();\r\n    \r\nSubscribe a handler object for T-typed messages received\r\n\r\n    template<typename T>\r\n    void IService::subscribe(IHandler& handler);\r\n    \r\nUnsubscribe from receiving T-typed messages\r\n\r\n    template<typename T>\r\n    void IService::unsubscribe();\r\n\r\nCreate a publisher for T-typed messages\r\n\r\n    template<typename T>\r\n    void IService::create_publisher();\r\n\r\nSend a message to all subscribers\r\n\r\n    void IService::send_message(IMsgObj& obj);\r\n\r\nRegister a notifier for peer status updates within the domain\r\n\r\n    void IService::register_discovery(IPeerNotification* notifier);\r\n\r\nReturn the own host ip address\r\n\r\n    std::string IService::get_host_ip() const;\r\n    \r\nDestroy the service singleton instance\r\n\r\n    static void IService::destroy();\r\n    \r\nReturn the service global logger\r\n\r\n    Poco::Logger& IService::logger();  \r\n\r\nRun the service in debug mode for exhaustive logging\r\n\r\n    void IService::debug_mode();\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}